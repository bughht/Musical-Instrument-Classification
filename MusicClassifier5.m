function [Y,Xf,Af] = MusicClassifier5(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Apr-2021 15:16:55.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx12 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx10 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-79.1923686181445;-71.8397127796509;-48.4384527676613;-45.4672813452127;-36.9406968771753;-51.2070122836369;-55.2172252315333;-25.995898733643;-29.3410485422751;-27.3158699034617;-22.6530838508633;-20.2137745994861];
x1_step1.gain = [0.0114519122595416;0.0164008224556604;0.0242300036075175;0.0243619455842358;0.0296745167668304;0.0271798891111202;0.0198893084210877;0.0327471264187208;0.0315534907473674;0.035032081192062;0.0436321771657524;0.0454428022768501];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.3152671934590913772;0.29644807804103168181;-0.5713962532343496159;0.47757057756264548187;0.20707812397450769959];
IW1_1 = [-0.89591791857477343086 0.47440602199483861146 1.7561712860145699544 -0.72601699644688655333 0.245793538810092832 0.87692325983223584629 -7.7625184607491579669 5.2083540285422946781 -4.6360670844748721464 3.1148614221993065065 -2.234160305684496084 1.3831012685579686661;-0.50542621507416185533 1.1515488968115028534 -1.6580869795188872828 -0.66981690197350252092 0.6841936229535663383 0.47597655227306123749 2.5019678587434692751 -1.4471454114092952015 1.0838078633400238804 -0.96896866795162239772 0.7290149680426236678 -0.59605129357331054774;0.61035740563557805416 -0.62377254791451974825 0.82243576281845853782 1.6358827967232700829 0.71246627006413443262 0.20963650937063432744 -0.46011413575468468329 0.44208467828182879122 -0.47377788207120485886 -0.25808265657201029386 0.074215851024076573417 -0.37311208006314650065;-1.8070390777841487395 1.9669081772859262625 -0.96296022871456898873 -0.26807960920079543232 0.91706914084304547163 0.14818629279620712524 0.91706944476822138679 1.2681638394111305335 -0.13141096936534124584 0.71789032382518236375 -0.040251676874810564388 0.47054060491306182179;-1.4096046331363181192 -2.8079154686447140854 1.3656993052327071059 2.9972536543144663312 -0.76322476313643905499 -3.1133078215562677293 -1.3041487422897635184 0.35311661315424902607 -0.8342675039579188212 0.81219388239251111283 -0.80948465539837233251 -0.25912064456795197431];

% Layer 2
b2 = [-1.1548258895232552668;-0.93263308643522246921;11.975466428513311001;5.02521984644568942;-1.2770579953656651107;-7.1843877583684010446;-5.467078670883216418;-6.8872906407751743885;3.3107433795222904749;2.2477044124685456872];
LW2_1 = [5.1905559468214770291 -9.4821723947659304343 11.988697413434877603 8.9462638423286655609 -9.7727468179092351619;-10.212306451731805623 -1.8832696594832329939 6.7466797162486509265 -1.5387026402654080393 5.2454357667329327697;-7.7968193238588092697 -14.589711498238600029 -6.3743419759254020818 10.071585426463999013 -0.024720809586152796278;0.76453304211696038184 4.1712717206012470683 7.0372855340919917566 0.79744563775862475907 0.12892643290747701768;3.609570297951952611 -1.9274784253445698123 -4.62678730203969657 -8.9110253363857054865 -5.2184333478733053724;1.6740288590655874046 -1.7929260746021058459 -19.604233186344302453 -7.5599058076133527351 -2.5566331346254207446;6.4680323014891607514 1.0610621094909864492 6.2496174262171848568 14.433182131803981463 5.5014413527979080243;5.6343579148290716674 15.484972243417786331 -1.2465500158139097842 -8.8699908385310273218 4.0812084015909197987;-2.9825005076809976146 1.9628950681213785945 -0.60265159888227304297 -4.3413114077895267329 -2.2837728103283443382;0.028848362615028662337 5.197775028719293644 -2.0895061300107706792 -4.938153826306315608 1.8589488283187365347];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
