function [Y,Xf,Af] = MusicClassifier10(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Apr-2021 14:52:16.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx12 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx10 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-79.1923686181445;-71.8397127796509;-48.4384527676613;-45.4672813452127;-36.9406968771753;-51.2070122836369;-55.2172252315333;-25.995898733643;-29.3410485422751;-27.3158699034617;-22.6530838508633;-20.2137745994861];
x1_step1.gain = [0.0114519122595416;0.0164008224556604;0.0242300036075175;0.0243619455842358;0.0296745167668304;0.0271798891111202;0.0198893084210877;0.0327471264187208;0.0315534907473674;0.035032081192062;0.0436321771657524;0.0454428022768501];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8941490656099997381;-0.66604651914117996014;-0.31093491822314439643;-0.35833533252274996084;3.2252505472144146204;-0.19141527636951269353;-0.55007540422119971524;0.10124962196234170431;1.2993102174968194085;-0.10051628668025039404];
IW1_1 = [1.8324494603215744082 0.76548501167998495021 -0.10414399218321407359 -0.61473456580260055215 1.4579981562711985532 1.7580644253020487611 5.6985610868439149357 -1.4922521515471538489 2.4402738175914442387 -1.1412114968146926941 1.3393239593377270769 -1.6491697638106426194;2.0364400172458330118 -5.1595515361649262331 4.4623283365315860038 -3.0172926159334956253 2.0031614916785178693 -1.2204814621450204015 0.091128191845730191489 -0.41741983494180007197 0.64869619072384876457 -0.1746828618138744349 0.29834711879392983302 -0.48577823155679827893;1.6869942079285262793 0.34061968065526071481 1.5495940302016364409 1.1501764002697185685 0.61909606570316855212 0.56938701537077796022 0.63746116880151049156 0.11160937331669600059 0.055363114691929650457 -0.25749902591405948726 0.34136118155036987432 -0.55550197286902502913;2.1976720152160815758 0.36654332871975575658 1.6196706159354210541 -2.8617586796671949934 -0.016036256935116968703 1.0271294950649532129 -1.5355762502668119929 0.23165083385849352671 0.46687598638339067314 -0.19179574817790792651 -0.070128238483746246912 0.7039754604754240308;-2.8911440698884152134 5.5272357855029516926 -3.2009012307095416894 0.80866849371202131902 -0.54472486326973568183 0.46018920061398743693 -2.1099488848549565745 1.8181078594816553196 -0.51395565530835174428 0.30236336126055851636 -0.33212959821841281371 0.65426669543274085239;-1.2116040198533182259 1.2835778964123565338 2.1138865126418537876 2.509094651684431021 -0.83705904809293552038 -1.5979192975802860577 0.2602552864348368078 -1.3347837550942318607 3.1379456778635117509 -1.4701539435900237152 0.42047150875979083517 0.31223722070260090389;0.83770601063165972544 2.3792214322059495046 1.5209401994855371587 0.64942350702934237283 -0.54126438650487784798 -0.36577250610931444363 -1.956089145969433396 -0.13950127368358944402 -1.0863059563405192964 1.5402897041211871532 0.57310601322342258346 -0.84654565024253380923;-0.88415236769197513844 0.97215024331953880932 -0.76991545524319360272 -0.38064960887920756827 0.41658914439568439647 2.4972539014506871524 -1.9707881910427325067 -1.413994049890053617 0.78437184668783843655 -0.62848878824649379027 0.14305102554638568502 0.44467508693708779344;1.4226042523410802332 2.1867522685275555538 -2.3054313387291447413 1.3054749913674992268 0.4346115702658635005 -3.4242824364142658844 1.1679328820067966799 -1.4568478608751169734 4.3715769680242395623 -5.576940720527852946 1.3517360928088693051 0.11608857535733836663;0.3943292038500755825 -0.69904024308658085918 1.1779352229440296362 0.69472960130128902367 -2.1836965270065049616 -1.0793775145605724042 2.7562866258370717354 -1.2409150792529475282 -0.99228587560051251248 2.0572322879502005222 -0.56714016257509880514 -0.98526571630479953257];

% Layer 2
b2 = [5.8793192161230170001;-4.6988673961534228596;9.9149797785584734555;8.8226708483905920133;-6.4535309592118803579;4.814616087742170869;-6.3919619067222139819;-15.141710972137872204;-1.236769368899322874;4.8515091611853780051];
LW2_1 = [4.9535233999597272359 -2.5585890238806685559 -0.16156105806451120932 0.31852847854041427267 2.2358302057435968102 5.033720415735451148 4.0988158627308450832 -2.9135060312363072477 -4.0752943894847692974 -3.0385749774178112403;-0.31181157894730465729 -3.9792308661674722359 4.7604437031426529714 -5.3962611618986811024 -7.6022670861155230426 2.9414295141542563528 -1.3946169852322585214 2.8751809853087375579 3.2370191041015377031 7.2242093513372536151;8.2305728372921880265 2.2996610339785585886 -12.445057636502387055 4.6508555259517372349 6.450598335360870017 5.2605425296334606955 2.1596042915574149568 -9.0997871629861322162 -3.3794644863266181112 -6.0853018831357914564;-0.83157690260237704383 -2.307878554194476628 6.0865644518957697784 -3.4194904489138573389 -6.1769592739560907901 -2.1777209008414266656 3.0310649092396664273 -3.042685426053397979 0.68789886235765096423 -6.7363593743214567056;-7.3376125835442236323 -1.931609669469415147 7.1081685362856816823 7.9828762463093214663 0.17085083555978133885 -4.9307216506868396522 -6.856377913456895179 2.7962606221265668971 -2.007686821716105019 0.1177178492883705907;0.96066419166307015498 -0.29939339558376604211 -9.9707881590910556469 8.1040198074221905244 0.39262165780913177437 -0.047524406444123923343 1.2402856343090484792 -1.5602768968454228116 0.28540226831981913014 3.0405847078689909324;-0.39032383136154030767 -4.5435409561024160396 -0.92973285339135280925 -3.6109651055182423462 -0.21897915132809864236 10.424302849237403024 0.77954303322695328582 2.0576625072717242837 -8.1488275289918981059 1.6910814469578037134;-1.6614389379101968114 11.350568559932195711 2.9594252682072941241 -7.6436740068023665273 6.7290992438972585532 -7.6306855878615564848 -0.48280046044863483834 4.7432489371771273667 6.994005933296567612 4.3349114478698691499;2.2214378459421864065 -0.45828028401910575473 0.071568244398150987484 2.134526979543670766 -2.8047675145915427208 -1.495132456072342908 -4.5683936983519570774 3.5304410884305110763 5.049776421169322127 2.9789662186557994694;-0.71611492300917412024 2.3121702205103633609 -0.54714758446442224304 -2.0730630672816832138 -3.2006731637119782974 -4.515896709024614708 2.5644676104316892484 -1.7126572198437863825 3.5989702714320621624 -0.67749887026423161185];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
